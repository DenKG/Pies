//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExclusiveCakesMVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PieConstructorEntities : DbContext
    {
        public PieConstructorEntities()
            : base("name=PieConstructorEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Branches> Branches { get; set; }
        public virtual DbSet<Compositions> Compositions { get; set; }
        public virtual DbSet<Events> Events { get; set; }
        public virtual DbSet<Forms> Forms { get; set; }
        public virtual DbSet<GettinTypes> GettinTypes { get; set; }
        public virtual DbSet<Ingredients> Ingredients { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<PieCatalogs> PieCatalogs { get; set; }
        public virtual DbSet<Statements> Statements { get; set; }
        public virtual DbSet<Themes> Themes { get; set; }
    
        public virtual int AddBranch(string branchName, string address)
        {
            var branchNameParameter = branchName != null ?
                new ObjectParameter("branchName", branchName) :
                new ObjectParameter("branchName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBranch", branchNameParameter, addressParameter);
        }
    
        public virtual int AddEvent(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEvent", nameParameter);
        }
    
        public virtual int AddGettinTypes(string gettingType, Nullable<decimal> price)
        {
            var gettingTypeParameter = gettingType != null ?
                new ObjectParameter("gettingType", gettingType) :
                new ObjectParameter("gettingType", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGettinTypes", gettingTypeParameter, priceParameter);
        }
    
        public virtual int AddIngredient(string ingredName)
        {
            var ingredNameParameter = ingredName != null ?
                new ObjectParameter("ingredName", ingredName) :
                new ObjectParameter("ingredName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIngredient", ingredNameParameter);
        }
    
        public virtual int AddPie(string pieName, Nullable<int> theme, Nullable<float> weight, Nullable<int> form, Nullable<decimal> price)
        {
            var pieNameParameter = pieName != null ?
                new ObjectParameter("pieName", pieName) :
                new ObjectParameter("pieName", typeof(string));
    
            var themeParameter = theme.HasValue ?
                new ObjectParameter("theme", theme) :
                new ObjectParameter("theme", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(float));
    
            var formParameter = form.HasValue ?
                new ObjectParameter("form", form) :
                new ObjectParameter("form", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPie", pieNameParameter, themeParameter, weightParameter, formParameter, priceParameter);
        }
    
        public virtual int AddStatus(string status)
        {
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStatus", statusParameter);
        }
    
        public virtual int AddTheme(string themeName)
        {
            var themeNameParameter = themeName != null ?
                new ObjectParameter("themeName", themeName) :
                new ObjectParameter("themeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTheme", themeNameParameter);
        }
    
        public virtual int CreateForm(string formName)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("formName", formName) :
                new ObjectParameter("formName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateForm", formNameParameter);
        }
    
        public virtual int CreateOrder(Nullable<int> pieId, Nullable<int> compositionId, Nullable<float> weight, Nullable<int> form, string inscription, byte[] image, string note, Nullable<System.DateTime> date, Nullable<int> getting, Nullable<int> branch, Nullable<int> name, string phone, Nullable<decimal> sum, Nullable<int> status)
        {
            var pieIdParameter = pieId.HasValue ?
                new ObjectParameter("pieId", pieId) :
                new ObjectParameter("pieId", typeof(int));
    
            var compositionIdParameter = compositionId.HasValue ?
                new ObjectParameter("compositionId", compositionId) :
                new ObjectParameter("compositionId", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(float));
    
            var formParameter = form.HasValue ?
                new ObjectParameter("form", form) :
                new ObjectParameter("form", typeof(int));
    
            var inscriptionParameter = inscription != null ?
                new ObjectParameter("inscription", inscription) :
                new ObjectParameter("inscription", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(byte[]));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var gettingParameter = getting.HasValue ?
                new ObjectParameter("getting", getting) :
                new ObjectParameter("getting", typeof(int));
    
            var branchParameter = branch.HasValue ?
                new ObjectParameter("branch", branch) :
                new ObjectParameter("branch", typeof(int));
    
            var nameParameter = name.HasValue ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateOrder", pieIdParameter, compositionIdParameter, weightParameter, formParameter, inscriptionParameter, imageParameter, noteParameter, dateParameter, gettingParameter, branchParameter, nameParameter, phoneParameter, sumParameter, statusParameter);
        }
    
        public virtual int DeleteBranch(Nullable<int> branchId)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBranch", branchIdParameter);
        }
    
        public virtual int DeleteEvent(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEvent", eventIdParameter);
        }
    
        public virtual int DeleteForm(Nullable<int> formId)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("formId", formId) :
                new ObjectParameter("formId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteForm", formIdParameter);
        }
    
        public virtual int DeleteGettinTypes(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGettinTypes", idParameter);
        }
    
        public virtual int DeleteIngredient(string ingredName, Nullable<int> id)
        {
            var ingredNameParameter = ingredName != null ?
                new ObjectParameter("ingredName", ingredName) :
                new ObjectParameter("ingredName", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIngredient", ingredNameParameter, idParameter);
        }
    
        public virtual int DeletePie(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePie", idParameter);
        }
    
        public virtual int DeleteStatus(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStatus", idParameter);
        }
    
        public virtual int DeleteTheme(string themeName, Nullable<int> id)
        {
            var themeNameParameter = themeName != null ?
                new ObjectParameter("themeName", themeName) :
                new ObjectParameter("themeName", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTheme", themeNameParameter, idParameter);
        }
    
        public virtual int EditBranch(Nullable<int> branchId, string branchName, string address)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("branchName", branchName) :
                new ObjectParameter("branchName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditBranch", branchIdParameter, branchNameParameter, addressParameter);
        }
    
        public virtual int EditEvent(string name, Nullable<int> eventId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditEvent", nameParameter, eventIdParameter);
        }
    
        public virtual int EditForm(Nullable<int> formId, string formName)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("formId", formId) :
                new ObjectParameter("formId", typeof(int));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("formName", formName) :
                new ObjectParameter("formName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditForm", formIdParameter, formNameParameter);
        }
    
        public virtual int EditGettinTypes(string gettingType, Nullable<decimal> price, Nullable<int> id)
        {
            var gettingTypeParameter = gettingType != null ?
                new ObjectParameter("gettingType", gettingType) :
                new ObjectParameter("gettingType", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditGettinTypes", gettingTypeParameter, priceParameter, idParameter);
        }
    
        public virtual int EditIngredient(string ingredName, Nullable<int> id)
        {
            var ingredNameParameter = ingredName != null ?
                new ObjectParameter("ingredName", ingredName) :
                new ObjectParameter("ingredName", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditIngredient", ingredNameParameter, idParameter);
        }
    
        public virtual int EditPie(string pieName, Nullable<int> theme, Nullable<float> weight, Nullable<int> form, Nullable<decimal> price, Nullable<int> id)
        {
            var pieNameParameter = pieName != null ?
                new ObjectParameter("pieName", pieName) :
                new ObjectParameter("pieName", typeof(string));
    
            var themeParameter = theme.HasValue ?
                new ObjectParameter("theme", theme) :
                new ObjectParameter("theme", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(float));
    
            var formParameter = form.HasValue ?
                new ObjectParameter("form", form) :
                new ObjectParameter("form", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditPie", pieNameParameter, themeParameter, weightParameter, formParameter, priceParameter, idParameter);
        }
    
        public virtual int EditStatus(string status, Nullable<int> id)
        {
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditStatus", statusParameter, idParameter);
        }
    
        public virtual int EditTheme(string themeName, Nullable<int> id)
        {
            var themeNameParameter = themeName != null ?
                new ObjectParameter("themeName", themeName) :
                new ObjectParameter("themeName", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditTheme", themeNameParameter, idParameter);
        }
    }
}
